library(ggplot2)
library(dplyr)
ds = read.csv('titanic.csv', header=TRUE)
attach(ds)
ds$Pclass = as.factor(ds$Pclass)
ds<-group_by(ds, ds$Pclass)
# 1. Linear scatterplot (stripchart) with means
stripchart(Age ~ Pclass, xlab = "Вік", ylab = "Клас", col=c("red", "green", "blue"))
means<-tapply(Age, Pclass, mean)
# 2. ANOVA
# 2.1 Normality visual test
ggplot(ds, aes(x = Age)) + geom_histogram() + facet_wrap(~ Pclass, ncol = 1)
# 2.2. Homoskedasticity visual and Bartlett test
boxplot(Age~Pclass, data = ds, xlab = "Вік", ylab = "Клас", varwidth = T, col = "lightblue")
bartlett.test(Age~Pclass, data = ds)
# 2.3 ANOVA table (to see whether or not the means differ significantly)
model<-lm(Age ~ Pclass, data = ds)
anova(model)
# 2.4 ANOVA for pairs (to see which means differ significantly)
summary(model)
# 2.5 Kruskal-Wallis test
kruskal.test(Age ~ Pclass, ds)
# 3. Contrast analysis
contrasts(ds$Pclass)
contrasts(ds$Pclass)<-contr.sum(n=3)
contrasts(ds$Pclass)
model2<-lm(Age~Pclass, data=ds)
summary(model2)
# 4. Rand index
rand.index()
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(MASS)
library(effsize)
library(dplyr)
library(factoextra)
library(stats)
library(ggfortify)
setwd("D:/Business/Study/Univ/3_course/1_semester/Data science/Lab_6/")
menu = read.csv(file = 'menu.csv', header = TRUE)
menu = head(menu,50)
menu = data.frame(Name = menu$Item, Calories = menu$Calories , Cholesterol = menu$Cholesterol)
row.names(menu) = menu$Name
centroid = hclust(d=distance, method="centroid")
median = hclust(d=distance, method="median")
ward = hclust(d=distance, method="ward.D2")
average = hclust(d=distance, method="average")
single = hclust(d=distance, method="single")
complete = hclust(d=distance, method="complete")
mcquitty = hclust(d = distance, method = "mcquitty")
distance = dist(menu, method="euclidean")
centroid = hclust(d=distance, method="centroid")
median = hclust(d=distance, method="median")
ward = hclust(d=distance, method="ward.D2")
average = hclust(d=distance, method="average")
single = hclust(d=distance, method="single")
complete = hclust(d=distance, method="complete")
mcquitty = hclust(d = distance, method = "mcquitty")
# 4. Rand index
rand.index()
library(fossil)
install.packages("fossil")
library(fossil)
()
# 4. Rand index
rand.index()
setwd("D:/Business/Study/Univ/3_course/1_semester/Data science/Lab_6/")
# 4. Rand index
label = c(1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 2 , 1 , 1 , 2 , 2 , 2 , 3 , 2 , 3 , 1 , 1)
rand.index(label, average)
label = as.numeric(label)
rand.index(label, average)
rand.index(label, as.numeric(average))
label
rand.index(label, average)
menu = read.csv(file = 'menu.csv', header = TRUE)
menu = read.csv(file = 'menu.csv', header = TRUE)
menu = head(menu,50)
menu = data.frame(Category = menu$Category , Name = menu$Item, Calories = menu$Calories , Cholesterol = menu$Cholesterol)
# 4. Rand index
rand.index(menu$Category, average)
# 4. Rand index
rand.index(1, average)
# 4. Rand index
rand.index(1, 1)
# 4. Rand index
rand.index(menu$Category, averageСut)
# 4. Rand index
as.numeric(menu$Category)
# 4. Rand index
as.factor(menu$Category)
# 4. Rand index
as.numeric(as.character(as.factor(menu$Category)))
# 4. Rand index
as.numeric(as.factor(menu$Category))
# 4. Rand index
rand.index(as.numeric(as.factor(menu$Category)), averageСut)
# 3. Best clustering results
averageСut = cutree(average, k=2)
medianCut = cutree(median, k=2)
# 4. Rand index
rand.index(as.numeric(as.factor(menu$Category)), averageСut)
rand.index(as.numeric(as.factor(menu$Category)), medianCut)
